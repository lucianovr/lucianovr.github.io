<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: geometria | Hello World Blog]]></title>
  <link href="http://lucianovr.github.io/blog/categories/geometria/atom.xml" rel="self"/>
  <link href="http://lucianovr.github.io/"/>
  <updated>2017-10-20T19:21:46-02:00</updated>
  <id>http://lucianovr.github.io/</id>
  <author>
    <name><![CDATA[Luciano Ribeiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ataque Fulminante]]></title>
    <link href="http://lucianovr.github.io/blog/2017/10/06/ataque-fulminante/"/>
    <updated>2017-10-06T23:34:01-03:00</updated>
    <id>http://lucianovr.github.io/blog/2017/10/06/ataque-fulminante</id>
    <content type="html"><![CDATA[<script type="text/javascript" async
  src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML">
</script>


<p>Como primeiro post, falarei de um problema de geometria. Trata-se do <em>Ataque Fulminante</em>, este que esteve presente na regional de 2009. Apesar de ser um problema antigo, uma quantidade relativamente pequena de usuários o resolveu no portal do URI.</p>

<p align="center">
    <img src="https://lucianovr.github.io/images/ataque_fulminante_1102.png";>
</p>




<!-- more -->


<p>É bem possível que se você já tenha resolvido este problema, possa ter feito de outra maneira da qual irei explicar aqui. Quando resolvi pela primeira vez analisei muitos corners cases e deu bastante trabalho. Recentemente, olhei para ele de novo e tive outra ideia que poderia ter facilitado a minha vida. Isso que irei explicar agora.</p>

<p>De início parece ser um problema difícil, mas com umas observações e um pequeno conhecimento de trigonometria, ele fica bem simples. Confira ele neste <a href="https://www.urionlinejudge.com.br/judge/pt/problems/view/1102">link</a>, pense um bocado na solução e só então <del>depois de perder as esperanças</del> continue com este tutorial :D</p>

<p>Primeiro, vamos interpretar as posições dos objetos como vetores posição no plano 2D.
Seja  \((\vec{P}, \theta, \alpha)\) o vetor posição do canhão, seu feixe de abertura e sua direção respectivamente e \((\vec{C}, R )\) o vetor posição da cidade e seu raio, como visto na imagem abaixo.</p>

<pre><code class="C++">struct point{
    double x, y;
    point(double _x=0, double _y=0){
        x = _x;
        y = _y;
    }
    point operator - (point q){
        return point(x - q.x, y - q.y);
    }
}

int main(){
    point C; double R; // dados da cidade
    point P; double alpha, theta; // dados do canhão

    cin &gt;&gt; C.x &gt;&gt; C.y &gt;&gt; R;
    cin &gt;&gt; P.x &gt;&gt; P.y &gt;&gt; alpha &gt;&gt; theta;
}
</code></pre>

<p align="center">
    <img src="https://lucianovr.github.io/images/ataque/ataque1.png" style="width:80%">
</p>


<p>Uma grande sacada que ajuda e muito a resolver este problema é aplicar translação e rotação nos objetos a fim de se obter uma representação única e equivalente para todos os casos de testes.</p>

<p>Podemos fazer de várias formas, a que eu acho mais interessante é posicionar o canhão no centro do sistema Cartesiano, e rotacionar a mira do canhão de tal forma que ele aponte para +x (\(\alpha = 0\)).<br/>
Para transladar os pontos para o centro é muito simples, basta subtrair \(\vec{P}\) do vetor posição do canhão e da cidade. A subtração de vetores é feita pela própria <strong>struct point</strong>, com o <em>overloading</em> do operator <strong>-</strong>.
O resultado é visto abaixo.</p>

<pre><code class="C++">struct point{...}

int main(){
    ...
    C = C - P; // a struct point sabe o que fazer com o operador -
    P = point(0,0);
}
</code></pre>

<p align="center">
    <img src="https://lucianovr.github.io/images/ataque/ataque2.png"style="width:80%">
</p>


<p>Até aqui tudo bem, mas e agora para rotacionar a direção do canhão?
Quando o canhão estiver apontando para +x, a cidade estará numa posição que é a posição antiga dela rotacionada de \(\alpha\) graus no sentido horário. Se tivesse mais pontos no plano, bastaria rotacionar todos eles com o mesmo ângulo.</p>

<p>Existe uma matriz que realiza a transformação de rotação de um ponto em relação a origem. Normalmente usamos a notação \(P' = R(\beta) * P\), onde \(P'\) é o ponto rotacionado de \(\beta\) graus no sentido <strong>anti-horário</strong>.
Como essa matriz rotaciona pontos em relação a oriem, foi por isso que trouxemos o canhão para a origem do sistema cartesiano.</p>

<p>$$
\left [ \begin{matrix} x' \\ y' \end{matrix} \right ] =
\left [ \begin{matrix} \cos(\beta) &amp; -\sin(\beta) \\  \sin(\beta) &amp; \cos(\beta) \end{matrix} \right ] \left [ \begin{matrix} x \\ y \end{matrix} \right ]
$$</p>

<p>Como queremos rotacionar o canhão no <strong>sentido horário</strong> de \(\alpha\) graus, basta trocar \(\beta\) por \(-\alpha\).</p>

<pre><code class="C++">double pi = acos(-1.0); // valor de PI

// rotaciona p em b graus no sentido anti-horário
point rotate(point p, double b){
    point r;
    b = b*pi/180.0; // converte b para radianos
    r.x = p.x * cos(b) - p.y*sin(b);
    r.y = p.x * sin(b) + p.y*cos(b);
    return r;
}

...
int main(){
    ...
    C = rotate(C, -alpha);
}
</code></pre>

<p align="center">
    <img src="https://lucianovr.github.io/images/ataque/ataque3.png"style="width:80%">
</p>


<p>Neste momento sabemos que o centro do círculo está no 1<sup>o</sup> ou 4<sup>o</sup> quadrante. Se você quiser ir um pouco além, pode garantir que o círculo fique no 1<sup>o</sup> quadrante fazendo:</p>

<pre><code class="C++">int main(){
    ...
    if (C.y &lt; 0) C.y *= -1;
}
</code></pre>

<p>Até aqui esta foi a parte mais fácil. Fizemos apenas duas operações simples sobre os dados da entrada.
Mas sem elas, as próximas etapas seriam muito mais difícies. De resto agora, dou como dica calcular o ângulo da reta que sai da origem e passa pelo centro do círculo faz com +X. Saber as distâncias do centro do círculo para as duas semi-retas que definem o feixe do canhão.</p>

<p>Até mais.</p>
]]></content>
  </entry>
  
</feed>
