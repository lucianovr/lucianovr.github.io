<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Geometria | Hello World Blog]]></title>
  <link href="http://lucianovr.github.io/blog/categories/geometria/atom.xml" rel="self"/>
  <link href="http://lucianovr.github.io/"/>
  <updated>2017-10-12T11:52:11-03:00</updated>
  <id>http://lucianovr.github.io/</id>
  <author>
    <name><![CDATA[Luciano Ribeiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ataque Fulminante]]></title>
    <link href="http://lucianovr.github.io/blog/2017/10/06/ataque-fulminante/"/>
    <updated>2017-10-06T23:34:01-03:00</updated>
    <id>http://lucianovr.github.io/blog/2017/10/06/ataque-fulminante</id>
    <content type="html"><![CDATA[<script type="text/javascript" async
  src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML">
</script>


<p>Como primeiro post, falarei de um problema de geometria. Trata-se do <em>Ataque Fulminante</em>, este que esteve presente na regional de 2009. Apesar de ser um problema antigo, uma quantidade relativamente pequena de usuário o resolveu no portal do URI.</p>

<p>De início parece ser um problema difícil, mas com umas observações e um pequeno conhecimento de trigonometria, ele fica bem simples. Confira ele neste <a href="https://www.urionlinejudge.com.br/judge/pt/problems/view/1102">link</a>, pense um bocado na solução e só então <del>depois de perder as esperanças</del> continue com este tutorial :D</p>

<p align="center">
    <img src="https://lucianovr.github.io/images/ataque_fulminante_1102.png";
</p>


<p>Vamos interpretar as posições dos objetos como vetores no plano 2D.
Seja \( (\vec{P}, \theta, \alpha) \) a posição do canhão, seu feixe de abertura e sua direção respectivamente e \( (\vec{C}, R \)) a posição da cidade e seu raio.</p>

<p>Uma grande sacada que ajuda e muito a resolver este problema é aplicar translação e rotação nos objetos da entrada a fim de obter uma representação equivalente para todos os casos de testes.</p>

<p>Podemos fazer de várias formas, a que eu acho mais interessante é posicionar o canhão no centro do sistema Cartesiano, e rotacionar a mira do canhão de tal forma que ele aponte para +x (\(\alpha = 0\)).</p>

<p>Para transladar os pontos para o centro é muito simples, basta somar \(&ndash;\vec{P}\) às coordenadas do canhão e da cidade.</p>

<p>Até aqui tudo bem, mas e agora para rotacionar a direção do canhão?
Bom, o que realmente importa e rotacionar a cidade em relação ao canhão para termos o efeito de que o canhão aponta para +x e que a cidade fique coerente com relação aos dados originais.</p>

<p>Para isto, aplicaremos uma matriz de rotação 2D vista abaixo, que serve para rotacionar um ponto em relação a origem \(\theta \) graus no sentido anti-horário.</p>

<p>$$
\left [ \begin{matrix} x' \\ y' \end{matrix} \right ] =
\left [ \begin{matrix} \cos(\theta) &amp; -\sin(\theta) \\  \sin(\theta) &amp; \cos(\theta) \end{matrix} \right ] \left [ \begin{matrix} x \\ y \end{matrix} \right ]
$$</p>

<pre><code class="Java">public class HelloWorld {
  public static void main(String[] args) {
      System.out.println("Hello World");
  }
}
</code></pre>

<pre><code class="C++">vector&lt;int&gt; V;
for (int i = 0; i &lt; V.size(); ++i){
    V[i]++;
}
</code></pre>

<pre><code class="Python">def main():
    for i in xrange(0,10):
        print(i)
if __name__ == '__main__':
    main()
else:
    pass
</code></pre>
]]></content>
  </entry>
  
</feed>
